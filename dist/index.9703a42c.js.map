{"mappings":"ACKA,MAAM,EAAkB,SAAS,oBAAoB,CAAC,OAAO,CAAC,EAAE,CAC1D,EAAmB,SAAS,cAAc,CAAC,cAC3C,EAAiB,SAAS,cAAc,CAAC,YACzC,EAAsB,SAAS,cAAc,CAAC,gBAG9C,EAAc,iBAyCpB,SAAS,IACP,IAAM,EAAO,OAAO,YAAY,CAAC,OAAO,CAAC,GAEzC,OADgB,EAAO,KAAK,KAAK,CAAC,GAAQ,EAAE,AAE9C,CAGA,SAAS,IACP,IAAM,EAAmB,SAAS,aAAa,CAAC,MAC1C,EAAiB,SAAS,aAAa,CAAC,MACxC,EAAU,GACO,CAAA,IAAnB,EAAQ,MAAM,GAGlB,EAAoB,SAAS,CAAG,GAChC,EAAiB,WAAW,CAAG,eAC/B,EAAQ,OAAO,CAAC,AAAC,IACf,IAAM,EAAW,SAAS,aAAa,CAAC,KACxC,CAAA,EAAS,WAAW,CAAG,CAAC,KAAK,EAAE,EAC7B,EAAO,SAAS,EAChB,IAAI,EAAE,EAAW,EAAO,OAAO,EAAE,CAAC,CACpC,EAAe,WAAW,CAAC,EAC7B,GAEA,EAAoB,WAAW,CAAC,GAChC,EAAoB,WAAW,CAAC,GAClC,CAGA,SAAS,EAAW,CAAU,EAE5B,OAAO,AADM,IAAI,KAAK,GACV,kBAAkB,CAAC,QAAS,CAAE,SAAU,KAAM,EAC5D,CApEA,EAAgB,gBAAgB,CAAC,SAAU,AAAC,IAC1C,EAAM,cAAc,GACpB,IAAM,EAAY,EAAiB,KAAK,CAClC,EAAU,EAAe,KAAK,CAehC,CAAA,CAdkB,IAAW,GAcH,AAdR,EAAW,CAcS,IACxC,EAAgB,KAAK,GACd,KAbT,AAmBF,SAAwB,CAAS,CAAE,CAAO,EACxC,IAAM,EAAU,IAChB,EAAQ,IAAI,CAAC,CAAE,UAAA,EAAW,QAAA,CAAQ,GAClC,EAAQ,IAAI,CAAC,CAAC,EAAG,IACR,IAAI,KAAK,EAAE,SAAS,EAAI,IAAI,KAAK,EAAE,SAAS,GAErD,OAAO,YAAY,CAAC,OAAO,CAAC,EAAa,KAAK,SAAS,CAAC,GAC1D,EA1BiB,EAAW,GAC1B,IACA,EAAgB,KAAK,GACvB,GAgEA","sources":["<anon>","src/app.js"],"sourcesContent":["// JS file for cycleTracker app\n// -------------\n// Variable declarations\n// -------------\nconst newPeriodFormEl = document.getElementsByTagName(\"form\")[0];\nconst startDateInputEl = document.getElementById(\"start-date\");\nconst endDateInputEl = document.getElementById(\"end-date\");\nconst pastPeriodContainer = document.getElementById(\"past-periods\");\n// Storage key is an app-wide constant\nconst STORAGE_KEY = \"period-tracker\";\n// -------------\n// Event Handlers\n// -------------\nnewPeriodFormEl.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const startDate = startDateInputEl.value;\n    const endDate = endDateInputEl.value;\n    if (checkDatesInvalid(startDate, endDate)) return;\n    storeNewPeriod(startDate, endDate);\n    renderPastPeriods();\n    newPeriodFormEl.reset();\n});\n// -------------\n// Functionality\n// -------------\n// 1. Form validation\nfunction checkDatesInvalid(startDate, endDate) {\n    if (!startDate || !endDate || startDate > endDate) {\n        newPeriodFormEl.reset();\n        return true;\n    }\n    return false;\n}\n// 2. Get, add, sort, and store data\nfunction storeNewPeriod(startDate, endDate) {\n    const periods = getAllStoredPeriods();\n    periods.push({\n        startDate,\n        endDate\n    });\n    periods.sort((a, b)=>{\n        return new Date(b.startDate) - new Date(a.startDate);\n    });\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(periods));\n}\n// 3. Get and parse data\nfunction getAllStoredPeriods() {\n    const data = window.localStorage.getItem(STORAGE_KEY);\n    const periods = data ? JSON.parse(data) : [];\n    return periods;\n}\n// 4. Display data\nfunction renderPastPeriods() {\n    const pastPeriodHeader = document.createElement(\"h2\");\n    const pastPeriodList = document.createElement(\"ul\");\n    const periods = getAllStoredPeriods();\n    if (periods.length === 0) return;\n    pastPeriodContainer.innerHTML = \"\";\n    pastPeriodHeader.textContent = \"Past periods\";\n    periods.forEach((period)=>{\n        const periodEl = document.createElement(\"li\");\n        periodEl.textContent = `From ${formatDate(period.startDate)} to ${formatDate(period.endDate)}`;\n        pastPeriodList.appendChild(periodEl);\n    });\n    pastPeriodContainer.appendChild(pastPeriodHeader);\n    pastPeriodContainer.appendChild(pastPeriodList);\n}\n// 5. format dates for display\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\"\n    });\n}\n// -------------\n// Call render on page load\n// -------------\nrenderPastPeriods();\n\n//# sourceMappingURL=index.9703a42c.js.map\n","// JS file for cycleTracker app\n\n// -------------\n// Variable declarations\n// -------------\nconst newPeriodFormEl = document.getElementsByTagName(\"form\")[0];\nconst startDateInputEl = document.getElementById(\"start-date\");\nconst endDateInputEl = document.getElementById(\"end-date\");\nconst pastPeriodContainer = document.getElementById(\"past-periods\");\n\n// Storage key is an app-wide constant\nconst STORAGE_KEY = \"period-tracker\";\n\n// -------------\n// Event Handlers\n// -------------\nnewPeriodFormEl.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  const startDate = startDateInputEl.value;\n  const endDate = endDateInputEl.value;\n  if (checkDatesInvalid(startDate, endDate)) {\n    return;\n  }\n  storeNewPeriod(startDate, endDate);\n  renderPastPeriods();\n  newPeriodFormEl.reset();\n});\n\n// -------------\n// Functionality\n// -------------\n\n// 1. Form validation\nfunction checkDatesInvalid(startDate, endDate) {\n  if (!startDate || !endDate || startDate > endDate) {\n    newPeriodFormEl.reset();\n    return true;\n  }\n  return false;\n}\n\n// 2. Get, add, sort, and store data\nfunction storeNewPeriod(startDate, endDate) {\n  const periods = getAllStoredPeriods();\n  periods.push({ startDate, endDate });\n  periods.sort((a, b) => {\n    return new Date(b.startDate) - new Date(a.startDate);\n  });\n  window.localStorage.setItem(STORAGE_KEY, JSON.stringify(periods));\n}\n\n// 3. Get and parse data\nfunction getAllStoredPeriods() {\n  const data = window.localStorage.getItem(STORAGE_KEY);\n  const periods = data ? JSON.parse(data) : [];\n  return periods;\n}\n\n// 4. Display data\nfunction renderPastPeriods() {\n  const pastPeriodHeader = document.createElement(\"h2\");\n  const pastPeriodList = document.createElement(\"ul\");\n  const periods = getAllStoredPeriods();\n  if (periods.length === 0) {\n    return;\n  }\n  pastPeriodContainer.innerHTML = \"\";\n  pastPeriodHeader.textContent = \"Past periods\";\n  periods.forEach((period) => {\n    const periodEl = document.createElement(\"li\");\n    periodEl.textContent = `From ${formatDate(\n      period.startDate,\n    )} to ${formatDate(period.endDate)}`;\n    pastPeriodList.appendChild(periodEl);\n  });\n\n  pastPeriodContainer.appendChild(pastPeriodHeader);\n  pastPeriodContainer.appendChild(pastPeriodList);\n}\n\n// 5. format dates for display\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString(\"en-US\", { timeZone: \"UTC\" });\n}\n\n// -------------\n// Call render on page load\n// -------------\n\nrenderPastPeriods();"],"names":["newPeriodFormEl","document","getElementsByTagName","startDateInputEl","getElementById","endDateInputEl","pastPeriodContainer","STORAGE_KEY","getAllStoredPeriods","data","window","localStorage","getItem","JSON","parse","renderPastPeriods","pastPeriodHeader","createElement","pastPeriodList","periods","length","innerHTML","textContent","forEach","period","periodEl","formatDate","startDate","endDate","appendChild","dateString","date","Date","toLocaleDateString","timeZone","addEventListener","event","preventDefault","value","reset","storeNewPeriod","push","sort","a","b","setItem","stringify"],"version":3,"file":"index.9703a42c.js.map"}